import java.util.*;
public class Test{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);	
		String input;
		String answer="abstract class";
		System.out.print("Q1.抽象クラスをソースコードで記述せよ>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解です");
				break;
			}else{
				System.out.println("違います");
			}
		}
		answer="str.equals(str2)";
		String answer2="str2.equals(str)";
		System.out.print("Q2.文字列のstrとstr2が等しいか調べる条件式を書け>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)||answer2.equals(input)){
				System.out.println("正解です");
				break;
			}else{
				System.out.println("違います");
			}	
		}
		answer="str.equalsIgnoreCase(str2)";
		answer2="str2.equalsIgnoreCase(str)";
		System.out.print("Q3.文字列のstrとstr2が大文字、小文字を区別せず内容が等しいか調べる条件式は>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)||answer2.equals(input)){
				System.out.println("正解です");
				break;
			}else{
				System.out.println("違います");
			}
		}
		answer="str.length()";
		System.out.print("Q4.文字列strの長さを調べる文字列操作を書け>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)||answer2.equalsIgnoreCase(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("違います");
			}
		}
		answer="str.isEmpty()";
		System.out.print("strが空もじかどうか調べる文字列操作をかけ>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("違います");
			}
		}
		answer="str.contains(\"implements\")";
		System.out.print("Q5.文字列strの一部に「implements」を含むか調べる文字列操作をかけ>");
		while(true){
			input=sc.nextLine();
			if(answer.contains(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("違います");
			}
		}	
		answer="str.startsWith(\"This\")";
		System.out.print("Q6.文字列strが「This」で始まるかを調べる文字列操作をかけ>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.endsWith(\"interface\")";
		System.out.print("Q7.文字列strが「interface」で終わるかどうかを調べるには>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.indexOf(\"extends\")";
		System.out.print("Q8.文字列strで「extends」が最初に登場する位置を調べるには>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.lastIndexOf(\"instanceof\")";
		System.out.print("Q9.文字列strで「instanceof」が最後に登場する位置を調べるには>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.charAt(3)";
		System.out.print("Q10.文字列strから四文字目を取り出すには>");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.substring(1)";
		System.out.print("Q11.文字列strから２文字目以降を取り出すには");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.substring(3,8)";
		System.out.print("Q12.文字列strから4~8文字目を取り出すには");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.toLowerCase()";
		System.out.print("Q13.文字列strを全て小文字に変換する");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.toUpperCase()";
		System.out.print("Q14.文字列strを全て大文字に変換する");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.trim()";
		System.out.print("Q15.文字列strの前後の空白を除去する");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="str.replace(this,the)";
		System.out.print("Q16.文字列strのthisをtheに置き換える");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="String[] words=str.split(\",\")";
		System.out.print("Q17.String配列wordsに文字列strを,で区切って代入するには");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="ArrayList<Integer> nums=new ArrayList<>()";
		System.out.print("Q18.整数を代入するArrayListのnumsを作れ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="ArrayList<Character> chars=new ArrayList<>()";
		System.out.print("Q19.一文字ずつ代入するArrayListのcharsを作れ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.add(\"StringBuilder\")";
		System.out.print("Q20.ArrayList<String> strsの最後のリストに文字列「StringBuilder」を追加せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.add(1,\"StringBuilder\")";
		System.out.print("Q20.ArrayList<String> strsの2番目の要素に「StringBuilder」を追加せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.set(2,\"StringBuilder\")";
		System.out.print("Q21.ArrayList<String> strsの3番目の要素に「StringBuilder」を上書き");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="int num=nums.get(4)";
		System.out.print("Q22.ArrayList<Integer> numsの5番目の要素を取り出しint numに代入");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="int num=nums.size()";
		System.out.print("Q23.ArrayList<Integer> numsの要素数をint numに代入せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="nums.isEmpty()";
		System.out.print("Q24.ArrayList<Integer> numsの要素数がゼロか判定する条件式を書け");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.contains(\"StringBuilder\")";
		System.out.print("Q25.ArrayList<String> strsの要素に「StringBuilder」があるか調べよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.indexOf(\"StringBuilder\")";
		System.out.print("Q26.ArrayList<String> strsの何番目の要素に「StringBuilder」があるか調べよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.clear()";
		System.out.print("Q27.ArrayList<String> strsの要素を全て削除せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.remove(2)";
		System.out.print("Q27.ArrayList<String> strsの3番目の要素を削除せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="for(int i=0;i<strs.size();i++){System.out.println(strs.get(i));}";
		System.out.print("Q28.ArrayList<String> strsの中身をfor文を使って表示せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="for(String s:strs){System.out.println(s);}";
		System.out.print("Q29.ArrayList<String> strsの中身を拡張for文を使って表示せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="Iterator<String> it=strs.iterator()";
		System.out.print("Q30.ArrayList<String> strsのイテレーターを作れ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="while(it.hasNext()){System.out.println(it.next());}";
		System.out.print("Q31.Q30のイテレーターを使いArraylist strsの要素を表示せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="Set<String> strs=new TreeSet<>()";
		System.out.print("Q32.自然順序付けで整列するString型のSet strsを作成せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="Set<String> strs=new LinkedHashSet<>()";
		System.out.print("Q33.値を格納した順序で整列するString型のSet strsを作成せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="Map<String,Integer> strs=new HashMap<>()";
		System.out.print("Q34.KeyがString型でvalueがInteger型のMap strsを作成せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.put(\"kyoko\",32)";
		System.out.print("Q36.Q35で作ったMAPにkyokoと32のペアを格納する");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.get(\"kyoko\")";
		System.out.print("Q37.Map strsのキー値kyokoに対応する値を取得せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.size()";
		System.out.print("Q38.Map strsに格納されているペア数を数えよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.containsKey(\"This\")";
		System.out.print("Q39.Map strsのkeyに「This」が含まれているか調べよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.containsValue(33)";
		System.out.print("Q40.Map strsのバリューに「33」が含まれているか調べよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.keySet()";
		System.out.print("Q41.Map strsに格納されているキーの一覧を返す");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="strs.keySet()";
		System.out.print("Q41.Map strsに格納されているキーの一覧を返す");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="for(String key:strs.keySet()){System.out.println(key+\"は\"+strs.get(key));}";
		System.out.print("Q42.Map strsに格納されているキーの一覧をfor文で返す");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="public interface Pan{void eat();}";
		System.out.print("Q43.eatメソッドを持ったPanのインタフェースを作れ。");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="public class FrancePan implements Pan{}";
		System.out.print("Q44.Panインタフェースを実装したFrancePanクラスを作成せよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="Hero h=(Hero)c";
		System.out.print("Q45.Character c=nwe Hero()で生成したcをHero hにダウンキャストせよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="c instanceof Hero";
		System.out.print("Q46.Character cの中身をHeroとみなしても大丈夫か判断する条件式を書け");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="private int hp";
		System.out.print("Q47.フィールドにあるint hpを他クラスから書き換えられないようにせよ");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="public String getName(){return this.name;}";
		System.out.print("Q48.フィールド値のString nameを返すgetメソッドを書け");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="public String void setName(String name){this.name=name;}";
		System.out.print("Q49.フィールド値のString nameにnmaeをセットするメソッドを書け");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
		answer="public void setName(String name){this.name=name;}";
		System.out.print("Q49.フィールド値のString nameにnmaeをセットするメソッドを書け");
		while(true){
			input=sc.nextLine();
			if(answer.equals(input)){
				System.out.println("正解");
				break;
			}else{
				System.out.println("不正解");
			}
		}
	}
}
